1. 模块化
    1.1 模块化概述
        Java语言随着这些年的发展已经成为了一门影响深远的编程语言，无数平台，系统都采用Java语言编写。但是
        伴随着发展，Java也越来越庞大，逐渐发展成为一门“臃肿”的语言。而且，无论是运行个大型的软件系统，还是
        运行一个小的程序，即使程序只需要使用Java的部分核心功能，JVM也要加载整个JRE环境。

        为了给Java“瘦身"，让Java实现轻量化，Java 9正式的推出了模块化系统。Java被拆分为N多个模块，并允
        许Java程序可以根据需要选择加载程序必须的Java模块，这样就可以让Java以轻量化的方式来运行

        其实，Java 7的时候已经提出了模块化的概念，但由于其过于复杂，Java 7，Java 8都一直未能真正推出，直
        到Java 9才真正成熟起来。对于Java语言来说，模块化系统是一次真正的自我革新，这种革新使得“古老而庞
        大”的Java语言重新焕发年轻的活力


                                           项目Project
                                    /         |         \
                                   /          |          \
                                  /           |           \
                                 /            |            \
                                /             |             \
                            模块1             模块2           模块...
                             |                |               |
                             包1              包1             包1
                             包2              包2             包2
                             包...            包...           包...
    1.2 模块的基本使用
        模块的基本使用步骤
            1.创建模块(按照以前的讲解方式创建模块，创建包，创建类，定义方法)
                为了体现模块的使用，我们创建2个模块。一个是myOne, 一个是myTwo
            2.在模块的src目录下新建一个名为module-info.java的描述性文件, 该文件专门定义模块名，访问权限，模块依赖等信息
                 描述性文件中使用模块导出和模块依赖来进行配置并使用
            3.模块中所有未导出的包都是模块私有的，他们是不能在模块之外被访问的
                在myOne这个模块下的描述性文件中配置模块导出
                模块导出格式: exports 包名;
            4.一个模块要访问其他的模块，必须明确指定依赖哪些模块，未明确指定依赖的模块不能访问
                在myTwo这个模块下的描述性文件中配置模映依赖
                模块依赖格式: requires 模块名;
                注意
                    写模块名报错，alt+enter，选择模块依赖
            5.在MyTwo这个模块中的类中使用依赖模块下的内容

    1.3 模块服务的使用
         服务
            从Java 6开始，Java提供了一种服务机制，允许服务提供者和服务使用者之间完成解耦
            简单的说，就是服务使用者只面向接口编程，但不清楚服务提供者的实现类

         Java 9的模块化系统则进一步的简化了Java的服务机制。Java 9允许将服务接口定义在一个模块中,
         并使用uses语句来声明该服务接口，然后针对该服务接口提供不同的服务实现类，这些服务实现类
         可以分布在不同的模块中，服务实现模块则使用provides语句为服务接口指定实现类
         服务使用者只需要面向接口编程即可

        模块服务的使用步骤
            1.在myOne模块下创建一个包space.hzzy,在该包下提供一个接口，接口中定义一个抽象方法
                public interface MyService {
                    void service0;
                }

            2.在space.hzzy包下创建一个包impl，在该包下提供接口的两个实现类Service1和Service2
            3.在myOne这个模块下的描述性文件中添如下配置
                模块导出: exports space.hzzy;
                服务提供: provides MyService with Service1;       指定MyService的服务实现类是Service1
            4. 在MyTwo这个模块的类中使用MyService接口提供的服务
                ServiceLoader
                    一种加载服务实现的工具
