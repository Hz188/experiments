4 泛型 genericity
    4.1 泛型概述
        JDK5 引入的新特性
        提供了编译时类型安全的检测，允许在编译时检测到非法的类型
        本质：参数化类型
            所操作的数据类型被指定为了一个参数
            就是将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型
        可以用在 class  interface method中
            称为 generic class 、 generic interface 、 generic method
        格式
            <type1> 一种  这里的类型可以看作是形参
            <type1, type2, type3 ...> 多种
            将来具体调用时候给定的类型可以看作实参，只能是引用类型
        好处
            运行期间的问题 提前到编译期间
            避免了强制类型转换

    4.2 泛型类
        修饰符 class 类名<type> { }
        public class Generic<T> {}
        T可是任一 T E K V 常用

    4.3 泛型方法
        修饰符 <type> 返回值类型 方法名(类型 变量名){}
        public <T> void show(T t){}

    4.4 泛型接口
        修饰符 interface 接口名<type> { }
        public interface Generic<T> {}

    4.5 类型通配符
        1. <?>
            List<?> 表示元素类型未知的List，可以匹配任何类型
            这种带通配符的List仅仅表示它是各种泛型List的父类，并不能把元素添加到其中

        2. <? extends 类型> 类型通配符上限
            List<? extends Number> 表示的类型是 Number或者Number子类

        3. <? super 类型> 类型通配符下限
            List<? super Number> 表示的是Number及其父类

    4.6 可变参数 Demo1
        参数数量可以变化，哦你工作方法的形参
        修饰符 返回值类型 方法名(数据类型... 变量名) {}
        public int sum(int... i)
        int... i == int[] i
        多个参数的话，可变参数放最后

    4.7 可变参数使用 Demo2
        Arrays
            public static <T> List<T> asList (T... a)      返回指定数组支持的固定大小列表
            不能增删，可改
        List
            public static <E> List<E> of(E... element)    返回包含任意数量元素的不可变列表
            不能增删改
        Set
            public static <E> Set<E> of(E... element)      返回一个包含任意数量元素的不可变集合
            不能增删，没改的操作
            给元素时候不能重复
