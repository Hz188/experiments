1. 方法引用

    1.1 体验方法引用
        在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿参数做操作
        那么考虑这种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，是否还需要重写逻辑呢？
            答案是肯定没有必要
        那么我们又是如何使用已经存在的解决方案呢？
            这就是我们要说的方法引用，我们通过方法引用来使用已经存在的方案

    1.2 方法引用符
        ::
            该符号被称为方法引用符，而它所在的表达式被称为方法引用
        Lambda表达式
            usePrintable(s -> System.out.println(s));
            分析：拿到s之后通过lambda表达式，传递给System.out.println方法去处理
        方法引用
            usePrintable(System.out::println);
            分析：直接使用System.out中的println方法代替Lambda，代码更加简洁
        推导与省略
            如果使用Lambda，那么根据”可推导就是可省略“的原则，无需指定参数类型，也无需指定重载形式，它们都将被自动推导
            如果使用方法引用，同样也是可以根据上下文进行推导
            方法引用时Lambda的孪生兄弟

    1.3 Lambda表达式支持的方法引用
        常见引用方式
            1.4 引用类方法 practice1
                其实就是引用类的静态方法
                格式
                    类名::静态方法
                eg: Integer::parseInt
            1.5 引用对象的实例方法 practice2
                其实就是引用类中的成员方法
                格式
                    对象::成员方法
                eg: "HelloWorld"::upperCase
            1.6 引用类的实例方法 practice3
                其实就是引用类中的成员方法
                格式
                    类名::成员方法
                eg: String::subString
            1.7 引用构造器 practice4
                其实就是引用构造方法
                格式
                    类名::new
                eg: Student::new
