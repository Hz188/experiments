1. 函数式接口

    1.1 概述
        函数式接口：指的是有且仅有一个抽象方法的接口
        Java中函数式变成的体现就是Lambda表达式，所以函数式接口就是可以适用于Lambda使用的接口
        只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利的进行推导

        如何检测一个接口是不是函数式接口？
            @FunctionalInterface
            放在接口定义的上方，如果是函数式接口，编译通过，如果不是，编译失败
        注意
            可以不写注解，如果满足函数式接口的条件，仍然是函数式接口，建议加上注解

    1.2 函数式接口作为方法的参数
        如果方法的参数是一个函数式接口，我们可以使用Lambda表达式作为参数传递

    1.3 函数式接口作为方法的返回值
        可以返回一个Lambda表达式

    1.4 常用的函数式接口
        Java 8 在 java.util.function 下定义了很多函数式接口给我们使用
        重点学习
            1.5 Supplier<T> 包含一个无参的方法
                T get() 获得结果
                该方法不需要参数，会按照某种逻辑(由Lambda实现)，返回一个数据
                Supplier<T> 也被称为生产型接口，我们指定泛型是什么类型，那么get就为我们生产什么类型的数据
            1.6 Consumer<T> 包含两个方法
                void accept(T t) 对给定的参数执行操作
                default Consumer<T> andThen(Consumer after) 返回一个组合的Consumer，依次执行此操作，然后执行after操作
                Consumer<T> 也被称为消费型接口，它消费的数据类型由泛型指定
            1.7 Predicate<T> 谓词
                boolean Test(T t) 对给定的参数进行判断 判断逻辑由lambda表达式实现，返回一个布尔值
                default Predicate<T> negate() 返回一个逻辑否定，对应逻辑非
                default Predicate<T> and(Predicate other) 返回一个组合判断，对应短路与
                default Predicate<T> or(Predicate other) 返回一个组合判断，对应短路或
                Predicate<T> 此接口通常用于判断参数是否满足指定的条件
            1.8 Function<T,R> 函数
                R apply(T t) 将此函数应用于给定的参数，输入T类型参数，得到R类型结果
                default <V> Function andThen(Function after) 返回一个组合函数，首先将函数应用于输入，然后用after函数应用于结果
                Function<T,R> 接口通常应用于对参数进行处理，转换（处理逻辑由Lambda表达式实现）然后返回一个新值

