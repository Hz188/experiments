#include <iostream>

using namespace std;

void func_1() {
    long a[2];
    a[1] = 1;
    a[0] = 2;
    a[-1] = 3;
    a[-2] = 4;
}
void func_2() {
    long b[4];
    b[3] = 1;
    b[2] = 2;
    b[1] = 3;
    b[0] = 4;
}

int main() {
    func_1();
    cout << "岁月静好" << endl;
}


/*
    上面的程序可以正常执行，没有报错，编译时候有警告
        低端地址方向越界，可能不会让代码崩溃
    func_1和func_2的汇编代码完全相同
        也就说明了，低端地址越界，其实相当于无意识的给数组扩大了长度（或者说新开了几个局部变量），如果越界地址没有别的用途（无主之地），也就是空闲堆栈，这时候不影响程序正常运行
        低端地址越界 = “开疆拓土” = rbp - x 操作
    那么高端地址越界 = rbp + x 操作，会影响main函数栈帧（高端地址并不是无用地址）
        这个时候可能就会出现 segment fault 等异常信息了


*/